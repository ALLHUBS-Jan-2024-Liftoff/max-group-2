import { blockSong, createPlaylist } from "../api/backendApi";
import { useContext, useMemo, useState } from "react";
import { AuthContext } from "../App";
import { BlockArtistIcon, BlockSongIcon, Clock, RemoveSongIcon, Undo } from "./Icons";

  const undo = (title, className, id, list, setList) => (
    <Undo className={className} title={title} onClick={() => setList(list.filter((e) => e !== id))} />
  );

export const Tracklist = ({ tracklist }) => {
  const [name, setName] = useState("New playlist");
  const [removedSongs, setRemovedSongs] = useState([]);
  const [blockedSongs, setBlockedSongs] = useState([]);
  const [blockedArtists, setBlockedArtists] = useState([]);
  const [isSaving, setIsSaving] = useState(false);
  const auth = useContext(AuthContext);
  const tracks = tracklist?.tracks;

  const trackList = useMemo(() => tracks?.map((track, i) => {
    const duration = new Date(track.duration_ms);
    return (
      <tr key={track.id}>
        <td>{i + 1}</td>
        <td>
          <img src={track.album?.url}></img>
        </td>
        <td className="track-artist-name">
          <div className="track-name">{track.name}</div>{" "}
          <div className="artist-name">{track.artists?.map((a) => a.name)}</div>
        </td>
        <td className="album-name">{track.album?.name}</td>
        <td className="duration">
          {duration.getMinutes()}:
          {String(duration.getSeconds()).padStart(2, "0")}
        </td>
        <td>
          {/* <button onClick={() => blockSong(auth, track.id)}>block song</button> */}
          {removedSongs.includes(track.id) ? (
            undo("Undo remove song", "undo-remove-song", track.id, removedSongs, setRemovedSongs)
          ) : (
            <RemoveSongIcon
              onClick={() => setRemovedSongs([...removedSongs, track.id])}
            />
          )}
          {blockedSongs.includes(track.id) ? (
            undo("Undo block song", "undo-block-song", track.id, blockedSongs, setBlockedSongs)
          ) : (
            <BlockSongIcon
              onClick={() => setBlockedSongs([...blockedSongs, track.id])}
            />
          )}
          {blockedArtists.includes(track.artists?.[0].id) ? (
            undo("Undo block artist", "undo-block-artist", track.artists?.[0].id, blockedArtists, setBlockedArtists)
          ) : (
            <BlockArtistIcon
              onClick={() =>
                setBlockedArtists([...blockedArtists, track.artists?.[0].id])
              }
            />
          )}
        </td>
      </tr>
    );
  }), [removedSongs, blockedSongs, blockedArtists, tracks]);
  return (
    <>
      <div className="tracklist">
        <table>
          <thead>
            <tr>
              <th>#</th>
              <th></th>
              <th>Title</th>
              <th>Album</th>
              <th className="duration-header"><Clock/></th>
            </tr>
          </thead>
          <tbody>{trackList}</tbody>
        </table>
      </div>

      <div className="playlist-name">
        Playlist name:{" "}
        <input value={name} onChange={(e) => setName(e.target.value)} />
      </div>

      <div className="export-button">
        <button
          disabled={isSaving}
          onClick={() =>
          {
            setIsSaving(true);
              return createPlaylist(
                auth,
                name,
                "Generated by Threemix",
                tracks?.map((track) => track.id)
              ).then(() => setIsSaving(false));
            }
          }
        >
          Export to Spotify
        </button>
      </div>
    </>
  );
};
